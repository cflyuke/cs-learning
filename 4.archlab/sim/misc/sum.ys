# sum.ys - Iteratively sum linked list elements
# Your Name and ID here

# Sample linked list
.align 4
ele1:
    .long 0x00a
    .long ele2
ele2:
    .long 0x0b0
    .long ele3
ele3:
    .long 0xc00
    .long 0

# Program starts at address 0
.pos 0
init:
    irmovl Stack, %esp   # Initialize stack pointer
    irmovl Stack, %ebp   # Initialize base pointer
    call Main            # Call main program
    halt                 # Terminate program

Main:
    pushl %ebp           # Save old base pointer
    rrmovl %esp, %ebp    # Set new base pointer
    
    irmovl ele1, %eax    # Load address of first element
    pushl %eax           # Push argument (list pointer)
    call SumList         # Call SumList function
    
    rrmovl %ebp, %esp    # Restore stack pointer
    popl %ebp            # Restore base pointer
    ret                  # Return from main

# int SumList(list_ptr ls)
SumList:
    pushl %ebp           # Save old base pointer
    rrmovl %esp, %ebp    # Set new base pointer
    pushl %ebx           # Save callee-save register
    
    mrmovl 8(%ebp), %ecx # Get list pointer (ls)
    xorl %eax, %eax      # Initialize sum (val = 0)
    
Loop:
    andl %ecx, %ecx      # Check if ls == NULL
    je Done              # If NULL, done
    
    mrmovl (%ecx), %ebx  # Get ls->val
    addl %ebx, %eax      # val += ls->val
    irmovl $4, %ebx
    addl %ebx, %ecx      # Move to next pointer
    mrmovl (%ecx), %ecx  # ls = ls->next
    jmp Loop             # Repeat
    
Done:
    popl %ebx            # Restore callee-save register
    rrmovl %ebp, %esp    # Restore stack pointer
    popl %ebp            # Restore base pointer
    ret                  # Return sum in %eax

# Stack starts here and grows to lower addresses
.pos 0x100
Stack:

